#!/usr/bin/env node
/**
 * GitHub Integration Setup Script
 * 
 * This script helps initialize GitHub integration for the YouTube Automation System.
 * It creates necessary configurations and provides instructions for setting up
 * CI/CD, secrets, and repository settings.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ YouTube Automation System - GitHub Integration Setup');
console.log('=====================================================');

// Check if running in a git repository
try {
  execSync('git status', { stdio: 'pipe' });
  console.log('‚úÖ Git repository detected');
} catch (error) {
  console.log('‚ùå Not in a Git repository');
  console.log('üí° Please initialize a Git repository first: git init');
  process.exit(1);
}

// Check if GitHub CLI is installed (optional)
try {
  execSync('gh --version', { stdio: 'pipe' });
  console.log('‚úÖ GitHub CLI detected');
} catch (error) {
  console.log('‚ö†Ô∏è  GitHub CLI not found (optional - for advanced features)');
  console.log('üí° Install GitHub CLI for enhanced functionality: https://cli.github.com/');
}

// Create .gitignore entries if they don't exist
const gitignorePath = path.join(__dirname, '.gitignore');
let gitignoreContent = '';
if (fs.existsSync(gitignorePath)) {
  gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
} else {
  gitignoreContent = '# Dependencies\nnode_modules/\n\n# Environment variables\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage:\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode-w/\nnanoc\n\n# Typescript v110x generated files\n.tsbuildinfo\n\n# Optional npm cache directory\ncache/\n\n# Optional eslint cache\ncache/\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of `npm pack`\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\'.next\n\n# nuxt.js build output\n.nuxt\n\ndist\nbuild\n\n# Temporary files during video processing\ntemp/\nupload/\n';
}

// Ensure sensitive files are in .gitignore
const sensitiveFiles = ['.env', '*.env', 'temp/', 'upload/'];
let needsUpdate = false;

for (const file of sensitiveFiles) {
  if (!gitignoreContent.includes(file)) {
    gitignoreContent += `\n${file}`;
    needsUpdate = true;
  }
}

if (needsUpdate) {
  fs.writeFileSync(gitignorePath, gitignoreContent);
  console.log('‚úÖ Updated .gitignore with sensitive files');
} else {
  console.log('‚úÖ .gitignore already contains sensitive file entries');
}

// Verify GitHub workflow directory exists
const workflowDir = path.join(__dirname, '.github', 'workflows');
if (!fs.existsSync(workflowDir)) {
  fs.mkdirSync(workflowDir, { recursive: true });
  console.log('‚úÖ Created .github/workflows directory');
} else {
  console.log('‚úÖ GitHub Actions workflow directory exists');
}

// Check if workflow file exists
const workflowFile = path.join(workflowDir, 'ci-cd.yml');
if (!fs.existsSync(workflowFile)) {
  console.log('‚ö†Ô∏è  GitHub Actions workflow file not found');
  console.log('üí° Run: npm install to ensure all files are in place');
} else {
  console.log('‚úÖ GitHub Actions workflow file exists');
}

// Suggest GitHub repo setup
console.log('\nüìã Recommended GitHub Repository Setup:');
console.log('1. Create a new repository on GitHub.com');
console.log('2. Add the remote origin: git remote add origin <your-repo-url>');
console.log('3. Push the code: git push -u origin main');
console.log('4. Add these secrets to your GitHub repository:');
console.log('   - YOUTUBE_API_1, YOUTUBE_API_2, YOUTUBE_API_3');
console.log('   - YOUTUBE_CHANNEL_1, YOUTUBE_CHANNEL_2, YOUTUBE_CHANNEL_3');
console.log('   - GEMINI_API_KEY');
console.log('   - SUPABASE_URL, SUPABASE_KEY');
console.log('   - TELEGRAM_API_KEY, TELEGRAM_CHAT_ID');
console.log('   - GITHUB_API_KEY - For integration with Supabase and Gemini services');
console.log('   - DEPLOY_KEY (if using SSH deployment)');
console.log('   - SERVER_HOST, SERVER_USER (if deploying to custom server)');
console.log('');

console.log('5. Create environments: development, production');

console.log('\nüí° GitHub API Key Setup:');
console.log('   - Go to GitHub Settings > Developer settings > Personal access tokens');
console.log('   - Create a new token with appropriate permissions');
console.log('   - Select scopes: repo, workflow, admin:repo_hook as minimum');
console.log('   - Add the token as GITHUB_API_KEY secret in your repository');

console.log('');
console.log('‚úÖ GitHub integration setup complete!');
console.log('üí° Run `npm run github:backup` to create your first backup to GitHub');