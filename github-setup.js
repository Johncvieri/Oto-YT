#!/usr/bin/env node
/**
 * GitHub Integration Setup Script
 * 
 * This script helps initialize GitHub integration for the YouTube Automation System.
 * It creates necessary configurations and provides instructions for setting up
 * CI/CD, secrets, and repository settings.
 */

// --- Dependencies ---
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// --- Constants ---
const SENSITIVE_FILES = ['.env', '*.env', 'temp/', 'upload/'];
const DEFAULT_GITIGNORE_CONTENT = `# Dependencies
node_modules/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage:
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node-w/
nanoc

# Typescript v110x generated files
.tsbuildinfo

# Optional npm cache directory
cache/

# Optional eslint cache
cache/
.eslintcache

# Optional REPL history
.node_repl_history

# Output of \`npm pack\`
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next

# nuxt.js build output
.nuxt

dist
build

# Temporary files during video processing
temp/
upload/
`;

// --- Setup Functions ---

/**
 * Initialize the GitHub setup process
 */
const initializeGitHubSetup = () => {
  console.log('🚀 YouTube Automation System - GitHub Integration Setup');
  console.log('=====================================================');
};

/**
 * Check if running in a git repository
 * @throws {Error} If not in a git repository
 */
const checkGitRepository = () => {
  try {
    execSync('git status', { stdio: 'pipe' });
    console.log('✅ Git repository detected');
  } catch (error) {
    console.log('❌ Not in a Git repository');
    console.log('💡 Please initialize a Git repository first: git init');
    process.exit(1);
  }
};

/**
 * Check if GitHub CLI is installed
 */
const checkGitHubCLI = () => {
  try {
    execSync('gh --version', { stdio: 'pipe' });
    console.log('✅ GitHub CLI detected');
  } catch (error) {
    console.log('⚠️  GitHub CLI not found (optional - for advanced features)');
    console.log('💡 Install GitHub CLI for enhanced functionality: https://cli.github.com/');
  }
};

/**
 * Update or create .gitignore file with sensitive files
 */
const updateGitignore = () => {
  const gitignorePath = path.join(__dirname, '.gitignore');
  let gitignoreContent = fs.existsSync(gitignorePath) 
    ? fs.readFileSync(gitignorePath, 'utf8') 
    : DEFAULT_GITIGNORE_CONTENT;

  let needsUpdate = false;

  for (const file of SENSITIVE_FILES) {
    if (!gitignoreContent.includes(file)) {
      gitignoreContent += `\n${file}`;
      needsUpdate = true;
    }
  }

  if (needsUpdate) {
    fs.writeFileSync(gitignorePath, gitignoreContent);
    console.log('✅ Updated .gitignore with sensitive files');
  } else {
    console.log('✅ .gitignore already contains sensitive file entries');
  }
};

/**
 * Ensure GitHub workflow directory exists
 */
const ensureWorkflowDirectory = () => {
  const workflowDir = path.join(__dirname, '.github', 'workflows');
  if (!fs.existsSync(workflowDir)) {
    fs.mkdirSync(workflowDir, { recursive: true });
    console.log('✅ Created .github/workflows directory');
  } else {
    console.log('✅ GitHub Actions workflow directory exists');
  }

  const workflowFile = path.join(workflowDir, 'ci-cd.yml');
  if (!fs.existsSync(workflowFile)) {
    console.log('⚠️  GitHub Actions workflow file not found');
    console.log('💡 Run: npm install to ensure all files are in place');
  } else {
    console.log('✅ GitHub Actions workflow file exists');
  }
};

/**
 * Print GitHub repository setup instructions
 */
const printSetupInstructions = () => {
  console.log('\n📋 Recommended GitHub Repository Setup:');
  console.log('1. Create a new repository on GitHub.com');
  console.log('2. Add the remote origin: git remote add origin <your-repo-url>');
  console.log('3. Push the code: git push -u origin main');
  console.log('4. Add these secrets to your GitHub repository:');
  console.log('   - YOUTUBE_API_1, YOUTUBE_API_2, YOUTUBE_API_3');
  console.log('   - YOUTUBE_CHANNEL_1, YOUTUBE_CHANNEL_2, YOUTUBE_CHANNEL_3');
  console.log('   - GEMINI_API_KEY');
  console.log('   - SUPABASE_URL, SUPABASE_KEY');
  console.log('   - TELEGRAM_API_KEY, TELEGRAM_CHAT_ID');
  console.log('   - GITHUB_API_KEY - For integration with Supabase and Gemini services');
  console.log('   - DEPLOY_KEY (if using SSH deployment)');
  console.log('   - SERVER_HOST, SERVER_USER (if deploying to custom server)');
  console.log('');

  console.log('5. Create environments: development, production');

  console.log('\n💡 GitHub API Key Setup:');
  console.log('   - Go to GitHub Settings > Developer settings > Personal access tokens');
  console.log('   - Create a new token with appropriate permissions');
  console.log('   - Select scopes: repo, workflow, admin:repo_hook as minimum');
  console.log('   - Add the token as GITHUB_API_KEY secret in your repository');

  console.log('');
  console.log('✅ GitHub integration setup complete!');
  console.log('💡 Run `npm run github:backup` to create your first backup to GitHub');
};

/**
 * Run the complete GitHub setup process
 */
const runGitHubSetup = () => {
  initializeGitHubSetup();
  checkGitRepository();
  checkGitHubCLI();
  updateGitignore();
  ensureWorkflowDirectory();
  printSetupInstructions();
};

// Run GitHub setup if this file is executed directly
if (require.main === module) {
  runGitHubSetup();
}

module.exports = {
  runGitHubSetup,
  checkGitRepository,
  checkGitHubCLI,
  updateGitignore,
  ensureWorkflowDirectory,
  printSetupInstructions
};